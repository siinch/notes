select = projection
where = selection
from = cartesian product


1.1 Relational Model
-Structure of relational databases
    - tables(relation), columns(attributes), rows(tuples)
-Keys in relational databases
    - candidate(minimal), super, primary, foreign
-Fundamental operations in relational algebra
    - select(rows), project(columns), union, difference, product, rename
    - intersect, join, natural join
    - PROJECT name (SELECT name = simon (students))

1.2 Normalization
-Overall goal of normalization
    - good design -> avoid redundancy and nulls
    - decomposition
-Functional Dependency, superkey and candidate Keys
    - super and candidate keys
    - x -(determines)-> y, z
-Boyce-Codd Normalform
    - has one common superkey
    - make example of lossless decomposition

1.3 Entity-Relationship Model
-Basic concepts
    - Entity Sets: attributes, PK, FK
    - Relationship Sets: roles, n-ary, attributes
-ER-Diagram
    - Cardinality: one/many
    - Relation Schema
-Weak Entity Sets
    - Dependent on other entities

1.4 Join in SQL
-using the operator join in SQL
    - aka. inner join
    - select * from posts join users on posts.userid = users.userid;
-SQL-expressions with and without use of this operator
    - select * from posts, user where posts.userid = users.userid;
-Natural join and examples of other join-operations
    - select * from posts natural join user;
    - inner/outer left/right

1.5 Aggregate functions
-Built-in aggregate functions
    - returns 1 result
    - sum, count, min, max, avg
-Grouping
    - group by, order by
-Conditions that applies to groups
    - having

1.6 Nested subqueries
-Subqueries using IN and EXISTS
    - in (x is in (y, z, i, j k))
    - exists (is not empty)
-Subqueries using SOME and ALL
    - all (all match are true)
    - some (one or more is true)
-Subqueries in the From Clause
    - must be renamed with AS

1.7 SQL Functions and Procedures
-Purpose
    - Code reuse
    - Business logic security
-Declaration, invocation
    - create or replace function/procedures
    - in expression or "call"
-Language constructs
    - if statements, while loops, for in loops
    - commit/rollback

1.8 SQL Triggers
-Purpose
    - Integrity maintenance / data update
-Language constructs specific for triggers
    - after/before update of x on y
    - referencing old / new row
    - return/create trigger
-Use for integrity maintenance and data update
    - cascade

1.9 SQL indexing
-Indexing Purpose
    - speed up data retrieval
    - search key -> pointer
    - Evaluation matrix / cost benefit
-How to index a table in SQL
    - primary key
    - create index x on y(z)
-How to check whether defined index is used
    - pg_stat_user_indexes;

1.10 Information retrieval basics
-information retrieval purpose
    - searching, relevance to input (keywords)
-Precision/recall
    - documents relevance to query
    - number of relevant documents
    - difficult to quantify
-Inverted Index
    - Document, location, count, weights -> keyword

1.11 Relevance Ranking Using Terms
-Term frequency
  - frequency relative to total terms log(1 + n(d, t)/n(d))
-Document frequency
  - frequency of documents with term (1/)n(t)
-tf-idf weighting
    - multiply the two and sum

1.12 Word clouds
-Compare to weighted word list
    - provides more context
    - see if the word is actually relevant
-Problems related to visualization by word clouds
    - takes a lot of space
    - just skim the actual text, kinda nonsense
-Frequency-based vs relevance weighted word clouds
    - count frequency of keywords
    - words might be redundant / text is just long
    - What are the most relevant keywords
    - words might be nonsense

2.1 C# Delegates & Lambda
-Describe Delegates
    - reference for a method
    - delegate int returnsint(int inputint)
-Explain Lambda
    - anonymous function x => x * x
-Examples of functional programming in C#
    - somearray.Where(condition).OrderBy(entity).Take(x);
    - public static int Count<T>(T[] arr, Predicate<T> condition)

2.2 C# Linq & Object Relational Mapping
-Linq functions: selection, projection, join, grouping
    - can be used on enumerables like lists
    - like sql, but in C#: from, (join) where, (group) select
-Describe object relational Mapping
    - database relations -> objects in server
-Entity Framework
    - Models
    - DbContext, DbSet
    - ModelBuilder, columnname, tablename

2.3 Generics, interfaces & abstracts classes
-What is the purpose of generics?
    - type parameter
    - code reuse
-Parameter constraints
    - where T : notnull, interface name, class, struct
-How to use interfaces and abstract classes
    - abstract or interface keyword
    - polymorphism, dynamic binding, multiple inheritance
    - Extensibility, Loose coupling
    - Factories

2.4 Network
-OSI Model
    - 7 layers
-Protocols
    - HTTP, ASCII, TLS, TCP/UDP, IP ...
    - really just standards
-Routing/Switching
    - WAN/LAN
    - IP/MAC

2.5 Network
-IP protocol and IP numbers
    - IPv4 IPv6
    - 8bit vs 16bit
-TCP Connection establishment
    - SYN/ACK
-Application layer
    - HTTP - type, body, header

2.6 HTTP
-Protocol stack when using HTTP
    - Application layer
-Client/Server Model
    - client(s) send request
    - Server sends response
-Request/Response
    - request line, headers, body
    - GET, POST, UPDATE, DELETE ...
    - status codes, headers, body
    - 2xx, 4xx, 5xx

2.7 Web services
-What is REST?
    - web service design paradigm
    - Stateless, Uniform Interface, self-descriptive
    - HTTP, JSON, URI
-Interface design and Hypermedia
    - intractable, text, images, video, etc.
    - granularity/semantics, stateless, asynchronous/multi-thread, top down, uniform
    - feedback, proximity, alignment, white space, contrast, hierarchy, repetition
-Authentication
    - password, salt, hash, tokens

2.8 ASP.NET
-MVC Architecture
    - model view controller
    - routing
-Middleware
    - link apps together
    - common infrastructure
    - services, security, database, transactions, clustering, diagnostics
-REST services
    - web service design paradigm
    - Stateless, Uniform Interface, self-descriptive
    - HTTP, JSON, URI

2.9 Design patterns, Application Architecture & Testing
-Multilayer applications
    - n-tier architecture or MVC
-Testing - properties mocking, etc.
    - test driven development
    - units, AAA,
    - mocks (called correctly?),
    - fakes (local implementation)
    - stubs (fixed output)
-Abstractions
    - Observer pattern
    - Factory pattern

3.1 Javascript and patterns
-Dynamic & untyped
    - change datatype at runtime
    - typeof
    - duck type
-Objects, literals, module pattern and
 revealing module patterns
    - object {}
    - string, number, bool, null
    - var module (function(){return}());
-Immediately-Invoked Function Expression
    - (function() {})();

3.2 Asynchronous programming
-Callbacks
    - function (callback){callback();}
    - async, await
-Functions & closures
    - var closure = (function() {return function(){};});
-Ajax (jQuery)
    - page -> server -> page
    - $(what).action();
    - simple dom and ajax

3.3 HTML & DOM
-Unobtrusive design
    - usable for everyone always
    - separate behavior, presentation and content
-DOM Element selection
    - document.getElementById("someid").text
-Single page applications
    - never reload (like standalone apps)
    - component switching

3.4 CSS3 & Bootstrap
-Cascading
    - cascade, specify, inheritance
    - order, selecting, parent / child
-CSS Selectors
    - #ids, .classes, element
    - @media type (feature)
    - :pseudo
-Bootstrap grid system
    - mobile first
    - xs sm, md, lg, xl, xxl,

3.5 Knockout & MVVM
-What is MVVM?
    - model, view, view-Model
    - data, graphic, interface
-Dependency tracking, declarative bindings,
 templating and the observable patterns
    - observable -> computed observable -> .. 
    - data-bind="whattobind: observable"
-Components
    - template(view) + view model
    - html/css + Javascript

3.6 Responsive Web design
-Media queries
    - @media mediatype (mediafeature)
-mobile first principle
    - small device is default
    - bootstrap grid
-Multi-device layout patterns
    - Mostly fluid
    - column drop
    - layout shifter
